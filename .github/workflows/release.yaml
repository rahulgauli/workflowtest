name: Conditional Release

on:
  push:
    branches:
      - main
      
permissions:
  contents: write
  
jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.release_type.outputs.type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest commit message
        id: get_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: release_type
        run: |
          COMMIT_MSG="${{ steps.get_commit.outputs.message }}"
          if [[ "$COMMIT_MSG" == fix:* ]]; then
            echo "type=fix" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == feat:* ]]; then
            echo "type=feat" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == chore:* ]]; then
            echo "type=chore" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi

  release:
    needs: version-check
    if: needs.version-check.outputs.type != 'chore' && needs.version-check.outputs.type != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest release tag
        id: get_latest_release
        run: |
          latest_tag=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"

      - name: Bump version
        id: bump_version
        run: |
          VERSION=${{ steps.get_latest_release.outputs.tag }}
          TYPE="${{ needs.version-check.outputs.type }}"
          VERSION="${VERSION#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [[ "$TYPE" == "fix" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$TYPE" == "feat" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > VERSION
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add VERSION
          git commit -m "ci: bump version to ${{ steps.bump_version.outputs.new }}"
          git push origin main

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.bump_version.outputs.new }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
