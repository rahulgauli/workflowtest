name: GitHub Security Scanning Workflow
on:
  workflow_call:
    inputs:
      product_id:
        type: string
        description: 'Product ID'
        required: true
        default: '123'
      
      scan_type:
        type: string
        description: 'Scan Type'
        required: true
        default: 'full'

jobs:
  lets_start_sculpting:
    runs-on: ubuntu-latest
    outputs:
      scanSummary: ${{ steps.scan.outputs.scanSummary }}
      
    steps:
      - name: Checkout the Clients repository
        uses: actions/checkout@v4
      
      - name: Print Github Context 
        env:
          github_context: ${{ toJson(github) }}
        run: echo "$github_context"

      - name: Checkout CoffeeScan Repository
        uses: actions/checkout@v4
        with:
          repository: rahulgauli/workflowtest
          path: scripts
          
      - name: Build Dependency to Run Custom Code
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Run the Code Scannig Script
        id: scan
        run: |
          cd scripts/scripts
          python3 scanner.py >> $GITHUB_STEP_SUMMARY
          json_output=$(python3 scanner.py)
          
          echo "scanSummary=$json_output" >> "$GITHUB_OUTPUT"
          # echo "$json_output" | jq -r '["Key", "Value"], ["---", "---"], (. | to_entries[] | [.key, .value]) | @tsv' | column -t -s $'\t' >> $GITHUB_STEP_SUMMARY
          
          # echo "$json_output" | jq -r 'to_entries | map(["Key", "Value"], ["---", "---"], [.key, .value]) | .[] | @tsv' | column -t -s $'\t' >> $GITHUB_STEP_SUMMARY
        

      - name: Add the Code Scan Summary as A comment in the PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.scan.outputs.scanSummary }}'
            })
            
      - name: Send Data to the Monitoring Dashboard
        run: |
          echo "Scan Summary Data Processed to the Dashboard"
      
      - name: Enforce Custom Policy as Code to the Repository
        env:
          policy_output: ${{ steps.scan.outputs.scanSummary }}
        run: |
          policy_result=$(echo "$policy_output" | jq -r '.policy_result')
          echo "Policy Result: $policy_result"
          if [ "$policy_result" == "fail" ]; then
            echo "Policy Check Failed"
            exit 1
          else
            echo "Policy Check Passed"
          fi
          
            
