name: GitHub Security Scanning Workflow
on:
  workflow_call:
    inputs:
      product_id:
        type: string
        description: 'Product ID'
        required: true
        default: '123'
      
      scan_type:
        type: string
        description: 'Scan Type'
        required: true
        default: 'full'

jobs:
  lets_start_sculpting:
  
    runs-on: ubuntu-latest
    outputs:
      scanSummary: ${{ steps.scan.outputs.scanSummary }}
      
    steps:
    
      - name: Checkout the Clients repository
        uses: actions/checkout@v4

      
      - name: Print Github Context 
        env:
          github_context: ${{ toJson(github) }}
        run: echo "$github_context"


      - name: Checkout CoffeeScan Repository
        uses: actions/checkout@v4
        with:
          repository: rahulgauli/workflowtest
          path: scripts

          
      - name: Build Dependency to Run Custom Code
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

          
      - name: Install Pipenv 
        run: |
          python3 -m pip install --upgrade pip
          pip install pipenv

          
      - name: Get the Repository's Programming language from the Context
        id: get_language
        run: |
          echo "Language: ${{ github.event.pull_request.base.repo.language }}"
          echo "language=${{ github.event.pull_request.base.repo.language }}" >> $GITHUB_ENV
          echo "language=${{ github.event.pull_request.base.repo.language }}" >> $GITHUB_OUTPUT
          echo "language=${{ github.event.pull_request.base.repo.language }}" >> $GITHUB_STEP_SUMMARY


      - name: Run the Snyk Code Scannig Script
        id: scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          CLIENT_LANGUAGE: ${{ github.event.pull_request.base.repo.language }}
          CLIENT_REPO_NAME: ${{ github.event.pull_request.base.repo.name }}
          CLIENT_REPO_URL: ${{ github.event.pull_request.base.repo.clone_url }}
          CLIENT_REPO_PATH: ${{ github.workspace }}/client_repo
          CLIENT_REPO_BRANCH: ${{ github.event.pull_request.base.ref }}
          CLIENT_REPO_PR_NUMBER: ${{ github.event.pull_request.number }}
          CLIENT_REPO_PR_URL: ${{ github.event.pull_request.html_url }}
          CLIENT_REPO_PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          cd scripts/scripts
          pipenv install
          pipenv install --dev
          echo "Dependency Install Successfully Completed"
          pipenv run python3 -m snyk-install 1.1296.1
          
      
      - name: Run GitGuardian Code Scanning Script
        run: |
          echo "GitGuardian scanned Results"


      - name: Build Application Image and Scan VIA wiz
        run: |
          echo "Image Build Process and Wiz Scan Results are here"


      - name: Add the Full PullRequest Code Scan Summary as A comment in the PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.scan.outputs.scanSummary }}'
            })

            
      - name: Send Data to the Monitoring Dashboard
        run: |
          echo "Scan Summary Data Processed to the Dashboard"

      
      - name: Enforce Custom Policy as Code to the Repository
        env:
          policy_output: ${{ steps.scan.outputs.scanSummary }}
        run: |
          policy_result=$(echo "$policy_output" | jq -r '.policy_result')
          echo "Policy Result: $policy_result"
          if [ "$policy_result" == "fail" ]; then
            echo "Policy Check Failed"
            exit 1
          else
            echo "Policy Check Passed"
          fi
          
            
